import requests
import base64
import os
import csv

# Set your GitHub token and organization information
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")  # Set this in environment variables for security
ORG_NAME = "xyz"  # Replace with your organization name

# API URL to get repositories in the organization
REPOS_URL = f"https://api.github.com/orgs/{ORG_NAME}/repos"
CODEOWNERS_PATH = ".github/CODEOWNERS"  # Adjust the path if the file is in a different location
BRANCH = "master"

# Set up headers with authentication
headers = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

def get_repositories():
    """Retrieve all repositories in the organization."""
    repos = []
    response = requests.get(REPOS_URL, headers=headers)
    
    if response.status_code == 200:
        repos = response.json()
    else:
        print(f"Failed to retrieve repositories: {response.status_code}")
    
    return repos

def get_codeowners_file(repo_name):
    """Retrieve the CODEOWNERS file from a specific repository."""
    file_contents_url = f"https://api.github.com/repos/{ORG_NAME}/{repo_name}/contents/{CODEOWNERS_PATH}?ref={BRANCH}"
    response = requests.get(file_contents_url, headers=headers)
    
    if response.status_code == 200:
        file_data = response.json()
        # The content is base64 encoded, so we decode it
        content = base64.b64decode(file_data["content"]).decode("utf-8")
        return content
    elif response.status_code == 404:
        return None  # File not found
    else:
        print(f"Failed to retrieve CODEOWNERS file for {repo_name}: {response.status_code}")
        return None

def validate_codeowners(content):
    """Validate the structure of the CODEOWNERS file."""
    # Basic validation: Ensure each line follows the format "<pattern> <codeowners>"
    valid = True
    lines = content.strip().split("\n")
    
    for line in lines:
        line = line.strip()
        
        # Skip comments and empty lines
        if line.startswith("#") or not line:
            continue
        
        # Check if the line contains at least two fields (a pattern and a code owner)
        parts = line.split()
        if len(parts) < 2:
            print(f"Invalid line: '{line}'")
            valid = False

    return valid

def check_repos_for_codeowners():
    """Check all repositories in the organization for the CODEOWNERS file presence and validity."""
    repos = get_repositories()
    results = []

    for repo in repos:
        repo_name = repo["name"]
        print(f"Checking {repo_name}...")
        
        # Check if CODEOWNERS file exists
        codeowners_content = get_codeowners_file(repo_name)
        if codeowners_content:
            print(f"CODEOWNERS file found in {repo_name}. Validating...")
            # Validate the CODEOWNERS file
            is_valid = validate_codeowners(codeowners_content)
            results.append([repo_name, "Found", "Valid" if is_valid else "Invalid"])
        else:
            print(f"No CODEOWNERS file found in {repo_name}.")
            results.append([repo_name, "Not Found", "N/A"])

    return results

def write_results_to_csv(results, output_file="codeowners_report.csv"):
    """Write the results to a CSV file."""
    with open(output_file, mode="w", newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Repository", "CODEOWNERS File", "Validity"])
        writer.writerows(results)
    
    print(f"Results written to {output_file}")

def main():
    # Check all repositories for CODEOWNERS presence and validity
    results = check_repos_for_codeowners()
    
    # Write the results to a CSV file
    write_results_to_csv(results)

if __name__ == "__main__":
    main()